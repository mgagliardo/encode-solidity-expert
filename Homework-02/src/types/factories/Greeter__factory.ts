/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Greeter, GreeterInterface } from "../Greeter";
import type { PromiseOrValue } from "../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "GreeterError",
    type: "error",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "greeting",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "throwError",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000a5738038062000a57833981016040819052620000349162000135565b6200006460405180606001604052806022815260200162000a3560229139826200007a60201b6200028a1760201c565b60006200007282826200027c565b5050620003a8565b620000c782826040516024016200009392919062000376565b60408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b17909152620000cb16565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200011f57818101518382015260200162000105565b838111156200012f576000848401525b50505050565b6000602082840312156200014857600080fd5b81516001600160401b03808211156200016057600080fd5b818401915084601f8301126200017557600080fd5b8151818111156200018a576200018a620000ec565b604051601f8201601f19908116603f01168101908382118183101715620001b557620001b5620000ec565b81604052828152876020848701011115620001cf57600080fd5b620001e283602083016020880162000102565b979650505050505050565b600181811c908216806200020257607f821691505b6020821081036200022357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027757600081815260208120601f850160051c81016020861015620002525750805b601f850160051c820191505b8181101562000273578281556001016200025e565b5050505b505050565b81516001600160401b03811115620002985762000298620000ec565b620002b081620002a98454620001ed565b8462000229565b602080601f831160018114620002e85760008415620002cf5750858301515b600019600386901b1c1916600185901b17855562000273565b600085815260208120601f198616915b828110156200031957888601518255948401946001909101908401620002f8565b5085821015620003385787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600081518084526200036281602086016020860162000102565b601f01601f19169290920160200192915050565b6040815260006200038b604083018562000348565b82810360208401526200039f818562000348565b95945050505050565b61067d80620003b86000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632f7643a814610051578063a41368621461005b578063cfae32171461006e578063ef690cc01461008c575b600080fd5b610059610094565b005b61005961006936600461037c565b6100ad565b61007661016a565b604051610083919061047a565b60405180910390f35b6100766101fc565b60405163c8508fc360e01b815260040160405180910390fd5b61015a60405180606001604052806023815260200161064e60239139600080546100d690610494565b80601f016020809104026020016040519081016040528092919081815260200182805461010290610494565b801561014f5780601f106101245761010080835404028352916020019161014f565b820191906000526020600020905b81548152906001019060200180831161013257829003601f168201915b5050505050836102e4565b6000610166828261051c565b5050565b60606000805461017990610494565b80601f01602080910402602001604051908101604052809291908181526020018280546101a590610494565b80156101f25780601f106101c7576101008083540402835291602001916101f2565b820191906000526020600020905b8154815290600101906020018083116101d557829003601f168201915b5050505050905090565b6000805461020990610494565b80601f016020809104026020016040519081016040528092919081815260200182805461023590610494565b80156102825780601f1061025757610100808354040283529160200191610282565b820191906000526020600020905b81548152906001019060200180831161026557829003601f168201915b505050505081565b61016682826040516024016102a09291906105dc565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16634b5c427760e01b179052610345565b6103408383836040516024016102fc9392919061060a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16632ced7cef60e01b179052610345565b505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561038e57600080fd5b813567ffffffffffffffff808211156103a657600080fd5b818401915084601f8301126103ba57600080fd5b8135818111156103cc576103cc610366565b604051601f8201601f19908116603f011681019083821181831017156103f4576103f4610366565b8160405282815287602084870101111561040d57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815180845260005b8181101561045357602081850181015186830182015201610437565b81811115610465576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061048d602083018461042d565b9392505050565b600181811c908216806104a857607f821691505b6020821081036104c857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561034057600081815260208120601f850160051c810160208610156104f55750805b601f850160051c820191505b8181101561051457828155600101610501565b505050505050565b815167ffffffffffffffff81111561053657610536610366565b61054a816105448454610494565b846104ce565b602080601f83116001811461057f57600084156105675750858301515b600019600386901b1c1916600185901b178555610514565b600085815260208120601f198616915b828110156105ae5788860151825594840194600190910190840161058f565b50858210156105cc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006105ef604083018561042d565b8281036020840152610601818561042d565b95945050505050565b60608152600061061d606083018661042d565b828103602084015261062f818661042d565b90508281036040840152610643818561042d565b969550505050505056fe4368616e67696e67206772656574696e672066726f6d202725732720746f2027257327a164736f6c634300080f000a4465706c6f79696e67206120477265657465722077697468206772656574696e673a";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _greeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  override getDeployTransaction(
    _greeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  override attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  override connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
